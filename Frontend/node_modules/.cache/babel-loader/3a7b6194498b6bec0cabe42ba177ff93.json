{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\BUE Year 3\\\\Cloud Computing\\\\Labs\\\\react-products-demo\\\\src\\\\pages\\\\ProdutPage.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect, useState } from 'react';\n// import { useParams } from 'react-router-dom';\n\n// const ChaletPage = () => {\n//   const [chalet, setChalet] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\n//   const params = useParams();\n//   // our dynamic segment was called chaletId, so we can access it as follows:\n//   const chaletId = params.chaletId;\n\n//   // now simply use useEffect to fetch the chalet's data\n\n//   useEffect(() => {\n//     const fetchAbortController = new AbortController();\n//     const fetchSignal = fetchAbortController.signal;\n\n//     const fetchChaletDetails = async () => {\n//       try {\n//         // send an HTTP GET request to the get chalets route we defined in our Express REST API\n//         const response = await fetch(\n//           `http://localhost:5000/chalets/${chaletId}`,\n//           {\n//             signal: fetchSignal\n//           }\n//         );\n//         // parse the response content to JSON and store it into data variable\n//         const data = await response.json();\n\n//         // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\n//         if (!response.ok) {\n//           // remember, in our REST API we return an error message in our response that has the key 'error'.\n//           throw Error(data.error);\n//         }\n\n//         // we now need to set our component state to the chalets we fetched\n//         setChalet(data.chalet);\n\n//         // after we set the chalets' state, let's set the loading state to false\n//         setIsLoading(false);\n//       } catch (err) {\n//         console.log(err.message);\n//       }\n//     };\n\n//     fetchChaletDetails();\n\n//     return () => {\n//       fetchAbortController.abort();\n//     };\n//   }, [chaletId]);\n\n//   if (isLoading) {\n//     return <h1>Please wait while loading chalet details...</h1>;\n//   }\n\n//   if (!chalet) {\n//     return <h1>Couldn't find chalet...</h1>;\n//   }\n\n//   return (\n//     // el chalet\n//     <div className=\"flex justify-center items-center w-screen gap-8 flex-wrap\">\n//       <div className=\"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\">\n//         <h1 className=\"font-bold text-4xl\">{chalet.name}</h1>\n//         <img\n//           src={chalet.imgURL}\n//           alt={chalet.name}\n//           className=\"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\n//         />\n//         <p className=\"text-lg\">{chalet.description}</p>\n//         <h3 className=\"text-lg font-bold\"> {chalet.supplierId.name}</h3>\n//         <h3 className=\"text-lg font-bold\">{chalet.price} EGP</h3>\n//       </div>\n//       {/* 7eta elle ganb el porduct */}\n//       <div className=\"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\">\n//         <h1 className=\"font-bold text-4xl\">{chalet.supplierId.name}</h1>\n//         <img\n//           src={chalet.supplierId.imgURL}\n//           alt={chalet.supplierId.name}\n//           className=\"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\n//         />\n//         <h2 className=\"text-lg\">{chalet.supplierId.email} EGP</h2>\n//         <h2 className=\"text-lg\">{chalet.supplierId.address}</h2>\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default ChaletPage;\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProdutPage = () => {\n  _s();\n  const [chalet, setProduct] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\n  const params = useParams();\n  // our dynamic segment was called productId, so we can access it as follows:\n  const chaletId = params.chaletId;\n\n  // now simply use useEffect to fetch the product's data\n\n  useEffect(() => {\n    const fetchAbortController = new AbortController();\n    const fetchSignal = fetchAbortController.signal;\n    const fetchProductDetails = async () => {\n      try {\n        // send an HTTP GET request to the get chalets route we defined in our Express REST API\n        const response = await fetch(`http://localhost:5000/chalets/${chaletId}`, {\n          signal: fetchSignal\n        });\n        // parse the response content to JSON and store it into data variable\n        const data = await response.json();\n\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\n        if (!response.ok) {\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\n          throw Error(data.error);\n        }\n\n        // we now need to set our component state to the products we fetched\n        setProduct(data.chalet);\n\n        // after we set the products' state, let's set the loading state to false\n        setIsLoading(false);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n    fetchProductDetails();\n    return () => {\n      fetchAbortController.abort();\n    };\n  }, [chaletId]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please wait while loading product details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 12\n    }, this);\n  }\n  if (!chalet) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Couldn't find chalet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex justify-center items-center w-screen gap-8 flex-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"font-bold text-4xl\",\n        children: chalet.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: chalet.imgURL,\n        alt: chalet.name,\n        className: \"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg\",\n        children: chalet.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"text-lg font-bold\",\n        children: [chalet.price, \" EGP\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        // src={chalet.supplierId.imgURL}\n        // alt={chalet.supplierId.name}\n        className: \"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n_s(ProdutPage, \"DJ1e4HWpPMm7Vv+ED6VcGgjyKGA=\", false, function () {\n  return [useParams];\n});\n_c = ProdutPage;\nexport default ProdutPage;\nvar _c;\n$RefreshReg$(_c, \"ProdutPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","ProdutPage","chalet","setProduct","isLoading","setIsLoading","params","chaletId","fetchAbortController","AbortController","fetchSignal","signal","fetchProductDetails","response","fetch","data","json","ok","Error","error","err","console","log","message","abort","name","imgURL","description","price"],"sources":["D:/University/BUE Year 3/Cloud Computing/Labs/react-products-demo/src/pages/ProdutPage.js"],"sourcesContent":["// import React, { useEffect, useState } from 'react';\r\n// import { useParams } from 'react-router-dom';\r\n\r\n// const ChaletPage = () => {\r\n//   const [chalet, setChalet] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n\r\n//   // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\r\n//   const params = useParams();\r\n//   // our dynamic segment was called chaletId, so we can access it as follows:\r\n//   const chaletId = params.chaletId;\r\n\r\n//   // now simply use useEffect to fetch the chalet's data\r\n\r\n//   useEffect(() => {\r\n//     const fetchAbortController = new AbortController();\r\n//     const fetchSignal = fetchAbortController.signal;\r\n\r\n//     const fetchChaletDetails = async () => {\r\n//       try {\r\n//         // send an HTTP GET request to the get chalets route we defined in our Express REST API\r\n//         const response = await fetch(\r\n//           `http://localhost:5000/chalets/${chaletId}`,\r\n//           {\r\n//             signal: fetchSignal\r\n//           }\r\n//         );\r\n//         // parse the response content to JSON and store it into data variable\r\n//         const data = await response.json();\r\n\r\n//         // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\r\n//         if (!response.ok) {\r\n//           // remember, in our REST API we return an error message in our response that has the key 'error'.\r\n//           throw Error(data.error);\r\n//         }\r\n\r\n//         // we now need to set our component state to the chalets we fetched\r\n//         setChalet(data.chalet);\r\n\r\n//         // after we set the chalets' state, let's set the loading state to false\r\n//         setIsLoading(false);\r\n//       } catch (err) {\r\n//         console.log(err.message);\r\n//       }\r\n//     };\r\n\r\n//     fetchChaletDetails();\r\n\r\n//     return () => {\r\n//       fetchAbortController.abort();\r\n//     };\r\n//   }, [chaletId]);\r\n\r\n//   if (isLoading) {\r\n//     return <h1>Please wait while loading chalet details...</h1>;\r\n//   }\r\n\r\n//   if (!chalet) {\r\n//     return <h1>Couldn't find chalet...</h1>;\r\n//   }\r\n\r\n//   return (\r\n//     // el chalet\r\n//     <div className=\"flex justify-center items-center w-screen gap-8 flex-wrap\">\r\n//       <div className=\"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\">\r\n//         <h1 className=\"font-bold text-4xl\">{chalet.name}</h1>\r\n//         <img\r\n//           src={chalet.imgURL}\r\n//           alt={chalet.name}\r\n//           className=\"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\r\n//         />\r\n//         <p className=\"text-lg\">{chalet.description}</p>\r\n//         <h3 className=\"text-lg font-bold\"> {chalet.supplierId.name}</h3>\r\n//         <h3 className=\"text-lg font-bold\">{chalet.price} EGP</h3>\r\n//       </div>\r\n//       {/* 7eta elle ganb el porduct */}\r\n//       <div className=\"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\">\r\n//         <h1 className=\"font-bold text-4xl\">{chalet.supplierId.name}</h1>\r\n//         <img\r\n//           src={chalet.supplierId.imgURL}\r\n//           alt={chalet.supplierId.name}\r\n//           className=\"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\r\n//         />\r\n//         <h2 className=\"text-lg\">{chalet.supplierId.email} EGP</h2>\r\n//         <h2 className=\"text-lg\">{chalet.supplierId.address}</h2>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ChaletPage;\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst ProdutPage = () => {\r\n  const [chalet, setProduct] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\r\n  const params = useParams();\r\n  // our dynamic segment was called productId, so we can access it as follows:\r\n  const chaletId = params.chaletId;\r\n\r\n  // now simply use useEffect to fetch the product's data\r\n\r\n  useEffect(() => {\r\n    const fetchAbortController = new AbortController();\r\n    const fetchSignal = fetchAbortController.signal;\r\n\r\n    const fetchProductDetails = async () => {\r\n      try {\r\n        // send an HTTP GET request to the get chalets route we defined in our Express REST API\r\n        const response = await fetch(\r\n          `http://localhost:5000/chalets/${chaletId}`,\r\n          {\r\n            signal: fetchSignal\r\n          }\r\n        );\r\n        // parse the response content to JSON and store it into data variable\r\n        const data = await response.json();\r\n\r\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\r\n        if (!response.ok) {\r\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\r\n          throw Error(data.error);\r\n        }\r\n\r\n        // we now need to set our component state to the products we fetched\r\n        setProduct(data.chalet);\r\n\r\n        // after we set the products' state, let's set the loading state to false\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    };\r\n\r\n    fetchProductDetails();\r\n\r\n    return () => {\r\n      fetchAbortController.abort();\r\n    };\r\n  }, [chaletId]);\r\n\r\n  if (isLoading) {\r\n    return <h1>Please wait while loading product details...</h1>;\r\n  }\r\n\r\n  if (!chalet) {\r\n    return <h1>Couldn't find chalet...</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center w-screen gap-8 flex-wrap\">\r\n      <div className=\"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\">\r\n        <h1 className=\"font-bold text-4xl\">{chalet.name}</h1>\r\n        <img\r\n          src={chalet.imgURL}\r\n          alt={chalet.name}\r\n          className=\"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\r\n        />\r\n        <p className=\"text-lg\">{chalet.description}</p>\r\n        <h3 className=\"text-lg font-bold\">{chalet.price} EGP</h3>\r\n      </div>\r\n      <div className=\"flex flex-col justify-center items-center gap-10 bg-sky-800 text-white py-16 min-w-[500px] rounded-3xl\">\r\n        {/* <h1 className=\"font-bold text-4xl\">{product.supplierId.name}</h1> */}\r\n        <img\r\n          // src={chalet.supplierId.imgURL}\r\n          // alt={chalet.supplierId.name}\r\n          className=\"object-scale-down h-[300px] bg-white p-10 rounded-3xl\"\r\n        />\r\n        {/* <h2 className=\"text-lg\">{product.supplierId.email} EGP</h2>\r\n        <h2 className=\"text-lg\">{product.supplierId.address}</h2> */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProdutPage;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}