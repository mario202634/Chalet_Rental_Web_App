{"ast":null,"code":"var _jsxFileName = \"E:\\\\ICS\\\\Y3\\\\Cloud\\\\frontend\\\\Cloud-Frontend\\\\src\\\\pages\\\\EditRentalPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport EditRentalForm from '../components/products/EditRentalForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditRentalPage = () => {\n  _s();\n  const [rental, setRental] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const userId = localStorage.getItem('userId');\n\n  // // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\n  // const params = useParams();\n  // // our dynamic segment was called productId, so we can access it as follows:\n  // const rentalId = params.rentalId;\n\n  // now simply use useEffect to fetch the product's data\n\n  useEffect(() => {\n    const fetchAbortController = new AbortController();\n    const fetchSignal = fetchAbortController.signal;\n    const fetchRentalDetails = async () => {\n      try {\n        // send an HTTP GET request to the get chalets route we defined in our Express REST API\n        const response = await fetch(`http://localhost:5000/rentals/user/${userId}`, {\n          signal: fetchSignal\n        });\n        // parse the response content to JSON and store it into data variable\n        const data = await response.json();\n\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\n        if (!response.ok) {\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\n          throw Error(data.error);\n        }\n\n        // we now need to set our component state to the products we fetched\n        setRental(data.rental);\n\n        // after we set the products' state, let's set the loading state to false\n        setIsLoading(false);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n    fetchRentalDetails();\n    return () => {\n      fetchAbortController.abort();\n    };\n  }, [userId]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please wait while loading your rental details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 12\n    }, this);\n  }\n  if (!rental) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Couldn't find rental...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EditRentalForm, {\n      rental: rental\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n};\n_s(EditRentalPage, \"Nt4k2PAaBmQlXGgIWGE2+pbYAUQ=\");\n_c = EditRentalPage;\nexport default EditRentalPage;\nvar _c;\n$RefreshReg$(_c, \"EditRentalPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","EditRentalForm","EditRentalPage","rental","setRental","isLoading","setIsLoading","userId","localStorage","getItem","fetchAbortController","AbortController","fetchSignal","signal","fetchRentalDetails","response","fetch","data","json","ok","Error","error","err","console","log","message","abort"],"sources":["E:/ICS/Y3/Cloud/frontend/Cloud-Frontend/src/pages/EditRentalPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport EditRentalForm from '../components/products/EditRentalForm';\r\n\r\nconst EditRentalPage = () => {\r\n  const [rental, setRental] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const userId = localStorage.getItem('userId');\r\n\r\n  // // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\r\n  // const params = useParams();\r\n  // // our dynamic segment was called productId, so we can access it as follows:\r\n  // const rentalId = params.rentalId;\r\n\r\n  // now simply use useEffect to fetch the product's data\r\n\r\n  useEffect(() => {\r\n    const fetchAbortController = new AbortController();\r\n    const fetchSignal = fetchAbortController.signal;\r\n\r\n    const fetchRentalDetails = async () => {\r\n      try {\r\n        // send an HTTP GET request to the get chalets route we defined in our Express REST API\r\n        const response = await fetch(\r\n          `http://localhost:5000/rentals/user/${userId}`,\r\n          {\r\n            signal: fetchSignal\r\n          }\r\n        );\r\n        // parse the response content to JSON and store it into data variable\r\n        const data = await response.json();\r\n\r\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\r\n        if (!response.ok) {\r\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\r\n          throw Error(data.error);\r\n        }\r\n\r\n        // we now need to set our component state to the products we fetched\r\n        setRental(data.rental);\r\n\r\n        // after we set the products' state, let's set the loading state to false\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    };\r\n\r\n    fetchRentalDetails();\r\n\r\n    return () => {\r\n      fetchAbortController.abort();\r\n    };\r\n  }, [userId]);\r\n\r\n  if (isLoading) {\r\n    return <h1>Please wait while loading your rental details...</h1>;\r\n  }\r\n\r\n  if (!rental) {\r\n    return <h1>Couldn't find rental...</h1>;\r\n  }\r\n\r\n  return (\r\n      <div>\r\n       <EditRentalForm rental={rental} />\r\n     </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditRentalPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,cAAc,MAAM,uCAAuC;AAAC;AAEnE,MAAMC,cAAc,GAAG,MAAM;EAAA;EAC3B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAMQ,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC;;EAE7C;EACA;EACA;EACA;;EAEA;;EAEAX,SAAS,CAAC,MAAM;IACd,MAAMY,oBAAoB,GAAG,IAAIC,eAAe,EAAE;IAClD,MAAMC,WAAW,GAAGF,oBAAoB,CAACG,MAAM;IAE/C,MAAMC,kBAAkB,GAAG,YAAY;MACrC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,sCAAqCT,MAAO,EAAC,EAC9C;UACEM,MAAM,EAAED;QACV,CAAC,CACF;QACD;QACA,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;QAElC;QACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB;UACA,MAAMC,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC;QACzB;;QAEA;QACAjB,SAAS,CAACa,IAAI,CAACd,MAAM,CAAC;;QAEtB;QACAG,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOgB,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;MAC1B;IACF,CAAC;IAEDX,kBAAkB,EAAE;IAEpB,OAAO,MAAM;MACXJ,oBAAoB,CAACgB,KAAK,EAAE;IAC9B,CAAC;EACH,CAAC,EAAE,CAACnB,MAAM,CAAC,CAAC;EAEZ,IAAIF,SAAS,EAAE;IACb,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAyD;EAClE;EAEA,IAAI,CAACF,MAAM,EAAE;IACX,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgC;EACzC;EAEA,oBACI;IAAA,uBACC,QAAC,cAAc;MAAC,MAAM,EAAEA;IAAO;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC9B;AAGX,CAAC;AAAC,GAjEID,cAAc;AAAA,KAAdA,cAAc;AAmEpB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}