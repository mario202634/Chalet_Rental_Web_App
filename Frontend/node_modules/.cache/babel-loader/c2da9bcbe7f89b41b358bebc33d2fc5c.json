{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\BUE Year 3\\\\Cloud Computing\\\\Labs\\\\react-products-demo\\\\src\\\\pages\\\\ProductsPage.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport ProductsList from '../components/products/ProductsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProductsPage = () => {\n  _s();\n  /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"text-7xl font-bold\",\n      children: \"Welcome to Home Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n\n  // let's define a state for products\n  const [products, setProducts] = useState([]);\n\n  // let's define a state for loading\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchAbortController = new AbortController();\n    const fetchSignal = fetchAbortController.signal;\n    const fetchProducts = async () => {\n      try {\n        // send an HTTP GET request to the get products route we defined in our Express REST API\n        const response = await fetch('http://localhost:5000/products', {\n          signal: fetchSignal\n        });\n        // parse the response content to JSON and store it into data variable\n        const data = await response.json();\n\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\n        if (!response.ok) {\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\n          throw Error(data.error);\n        }\n\n        // we now need to set our component state to the products we fetched\n        setProducts(data.products);\n\n        // after we set the products' state, let's set the loading state to false\n        setIsLoading(false);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n    fetchProducts();\n    return () => {\n      fetchAbortController.abort();\n    };\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Please wait while we are loading data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-col items-center justify-center\",\n    children: /*#__PURE__*/_jsxDEV(ProductsList, {\n      products: products\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(ProductsPage, \"U7Qxnmy0PRpeVhtyqezv0QxSkvk=\");\n_c = ProductsPage;\nexport default ProductsPage;\nvar _c;\n$RefreshReg$(_c, \"ProductsPage\");","map":{"version":3,"names":["useEffect","useState","ProductsList","ProductsPage","products","setProducts","isLoading","setIsLoading","fetchAbortController","AbortController","fetchSignal","signal","fetchProducts","response","fetch","data","json","ok","Error","error","err","console","log","message","abort"],"sources":["D:/University/BUE Year 3/Cloud Computing/Labs/react-products-demo/src/pages/ProductsPage.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport ProductsList from '../components/products/ProductsList';\r\n\r\nconst ProductsPage = () => {\r\n\r\n    <div>\r\n      <h1 className=\"text-7xl font-bold\">Welcome to Home Page</h1>\r\n    </div>\r\n\r\n  // let's define a state for products\r\n  const [products, setProducts] = useState([]);\r\n\r\n  // let's define a state for loading\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchAbortController = new AbortController();\r\n    const fetchSignal = fetchAbortController.signal;\r\n\r\n    const fetchProducts = async () => {\r\n      try {\r\n        // send an HTTP GET request to the get products route we defined in our Express REST API\r\n        const response = await fetch('http://localhost:5000/products', {\r\n          signal: fetchSignal\r\n        });\r\n        // parse the response content to JSON and store it into data variable\r\n        const data = await response.json();\r\n\r\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\r\n        if (!response.ok) {\r\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\r\n          throw Error(data.error);\r\n        }\r\n\r\n        // we now need to set our component state to the products we fetched\r\n        setProducts(data.products);\r\n\r\n        // after we set the products' state, let's set the loading state to false\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    };\r\n\r\n    fetchProducts();\r\n\r\n    return () => {\r\n      fetchAbortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return <p>Please wait while we are loading data...</p>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex flex-col items-center justify-center\">\r\n      <ProductsList products={products} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProductsPage;\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,YAAY,MAAM,qCAAqC;AAAC;AAE/D,MAAMC,YAAY,GAAG,MAAM;EAAA;EAEvB;IAAA,uBACE;MAAI,SAAS,EAAC,oBAAoB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAA0B;IAAA;IAAA;IAAA;EAAA,QACxD;;EAER;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMQ,oBAAoB,GAAG,IAAIC,eAAe,EAAE;IAClD,MAAMC,WAAW,GAAGF,oBAAoB,CAACG,MAAM;IAE/C,MAAMC,aAAa,GAAG,YAAY;MAChC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,EAAE;UAC7DH,MAAM,EAAED;QACV,CAAC,CAAC;QACF;QACA,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;QAElC;QACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB;UACA,MAAMC,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC;QACzB;;QAEA;QACAd,WAAW,CAACU,IAAI,CAACX,QAAQ,CAAC;;QAE1B;QACAG,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOa,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;MAC1B;IACF,CAAC;IAEDX,aAAa,EAAE;IAEf,OAAO,MAAM;MACXJ,oBAAoB,CAACgB,KAAK,EAAE;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIlB,SAAS,EAAE;IACb,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAA+C;EACxD;EAEA,oBACE;IAAK,SAAS,EAAC,2CAA2C;IAAA,uBACxD,QAAC,YAAY;MAAC,QAAQ,EAAEF;IAAS;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAChC;AAEV,CAAC;AAAC,GAzDID,YAAY;AAAA,KAAZA,YAAY;AA2DlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module"}