{"ast":null,"code":"var _jsxFileName = \"E:\\\\ICS\\\\Y3\\\\Cloud\\\\frontend\\\\Cloud-Frontend\\\\src\\\\pages\\\\EditUserPage.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n\n// import EditUserForm from '../components/products/EditUserForm';\n// const userId = localStorage.getItem('userId');\n\n// const EditUserPage = () => {\n//   const [userz, setUser] = useState(null);\n//   const [isLoading, setIsLoading] = useState(true);\n\n//   useEffect(() => {\n//     const fetchAbortController = new AbortController();\n//     const fetchSignal = fetchAbortController.signal;\n\n//     const fetchUser = async () => {\n//       try {\n//         const response = await fetch(`http://localhost:5000/user/6392825ba8af2bf7513483b4`, {\n//           signal: fetchSignal\n//         });\n//         const data = await response.json();\n\n//         if (!response.ok) {\n//           throw Error(data.error);\n//         }\n\n//         setUser(data.userz);\n//         setIsLoading(false);\n//       } catch (err) {\n//         console.log(err.message);\n//       }\n//     };\n\n//     fetchUser();\n\n//     return () => {\n//       fetchAbortController.abort();\n//     };\n//   }, [userId]);\n\n//   if (isLoading) {\n//     return <p>Loading list of existing governorates...</p>;\n//   }\n//   if (!userz) {\n//     return <h1>Couldn't find user...</h1>;\n//   }\n//   return (\n//     <div>\n//       <EditUserForm userz={userz.username} />\n//     </div>\n//   );\n// };\n\n// export default EditUserPage;\n\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport EditUserForm from '../components/products/EditUserForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EditUserPage = () => {\n  _s();\n  const [userx, setUser] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\n  // const params = useParams();\n  // // our dynamic segment was called productId, so we can access it as follows:\n  // const chaletId = params.chaletId;\n\n  // now simply use useEffect to fetch the product's data\n\n  useEffect(() => {\n    const fetchAbortController = new AbortController();\n    const fetchSignal = fetchAbortController.signal;\n    const fetchChaletDetails = async () => {\n      try {\n        // send an HTTP GET request to the get chalets route we defined in our Express REST API\n        const response = await fetch(`http://localhost:5000/user/6392825ba8af2bf7513483b4`, {\n          signal: fetchSignal\n        });\n        // parse the response content to JSON and store it into data variable\n        const data = await response.json();\n\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\n        if (!response.ok) {\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\n          throw Error(data.error);\n        }\n\n        // we now need to set our component state to the products we fetched\n        setUser(data.users);\n\n        // after we set the products' state, let's set the loading state to false\n        setIsLoading(false);\n      } catch (err) {\n        console.log(err.message);\n      }\n    };\n    fetchChaletDetails();\n    return () => {\n      fetchAbortController.abort();\n    };\n  }, ['6392825ba8af2bf7513483b4']);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Please wait while loading chalet details...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }, this);\n  }\n  if (!userx) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Couldn't find chalet...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(EditUserForm, {\n      userx: userx\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 7\n  }, this);\n};\n_s(EditUserPage, \"Lrlh2gtLHQSp54lijxnb3RbD5qg=\");\n_c = EditUserPage;\nexport default EditUserPage;\nvar _c;\n$RefreshReg$(_c, \"EditUserPage\");","map":{"version":3,"names":["React","useEffect","useState","useParams","EditUserForm","EditUserPage","userx","setUser","isLoading","setIsLoading","fetchAbortController","AbortController","fetchSignal","signal","fetchChaletDetails","response","fetch","data","json","ok","Error","error","users","err","console","log","message","abort"],"sources":["E:/ICS/Y3/Cloud/frontend/Cloud-Frontend/src/pages/EditUserPage.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n\r\n// import EditUserForm from '../components/products/EditUserForm';\r\n// const userId = localStorage.getItem('userId');\r\n\r\n// const EditUserPage = () => {\r\n//   const [userz, setUser] = useState(null);\r\n//   const [isLoading, setIsLoading] = useState(true);\r\n\r\n//   useEffect(() => {\r\n//     const fetchAbortController = new AbortController();\r\n//     const fetchSignal = fetchAbortController.signal;\r\n\r\n//     const fetchUser = async () => {\r\n//       try {\r\n//         const response = await fetch(`http://localhost:5000/user/6392825ba8af2bf7513483b4`, {\r\n//           signal: fetchSignal\r\n//         });\r\n//         const data = await response.json();\r\n\r\n//         if (!response.ok) {\r\n//           throw Error(data.error);\r\n//         }\r\n\r\n//         setUser(data.userz);\r\n//         setIsLoading(false);\r\n//       } catch (err) {\r\n//         console.log(err.message);\r\n//       }\r\n//     };\r\n\r\n//     fetchUser();\r\n\r\n//     return () => {\r\n//       fetchAbortController.abort();\r\n//     };\r\n//   }, [userId]);\r\n\r\n//   if (isLoading) {\r\n//     return <p>Loading list of existing governorates...</p>;\r\n//   }\r\n//   if (!userz) {\r\n//     return <h1>Couldn't find user...</h1>;\r\n//   }\r\n//   return (\r\n//     <div>\r\n//       <EditUserForm userz={userz.username} />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default EditUserPage;\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport EditUserForm from '../components/products/EditUserForm';\r\n\r\nconst EditUserPage = () => {\r\n  const [userx, setUser] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  // use the useParams hook in React Router to allow us to access dynamic segments in our dynamic route\r\n  // const params = useParams();\r\n  // // our dynamic segment was called productId, so we can access it as follows:\r\n  // const chaletId = params.chaletId;\r\n\r\n  // now simply use useEffect to fetch the product's data\r\n\r\n  useEffect(() => {\r\n    const fetchAbortController = new AbortController();\r\n    const fetchSignal = fetchAbortController.signal;\r\n\r\n    const fetchChaletDetails = async () => {\r\n      try {\r\n        // send an HTTP GET request to the get chalets route we defined in our Express REST API\r\n        const response = await fetch(\r\n          `http://localhost:5000/user/6392825ba8af2bf7513483b4`,\r\n          {\r\n            signal: fetchSignal\r\n          }\r\n        );\r\n        // parse the response content to JSON and store it into data variable\r\n        const data = await response.json();\r\n\r\n        // If there is an HTTP error (the response is NOT ok), throw the error message we get from the REST API.\r\n        if (!response.ok) {\r\n          // remember, in our REST API we return an error message in our response that has the key 'error'.\r\n          throw Error(data.error);\r\n        }\r\n\r\n        // we now need to set our component state to the products we fetched\r\n        setUser(data.users);\r\n\r\n        // after we set the products' state, let's set the loading state to false\r\n        setIsLoading(false);\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    };\r\n\r\n    fetchChaletDetails();\r\n\r\n    return () => {\r\n      fetchAbortController.abort();\r\n    };\r\n  }, ['6392825ba8af2bf7513483b4']);\r\n\r\n  if (isLoading) {\r\n    return <h1>Please wait while loading chalet details...</h1>;\r\n  }\r\n\r\n  if (!userx) {\r\n    return <h1>Couldn't find chalet...</h1>;\r\n  }\r\n\r\n  return (\r\n      <div>\r\n       <EditUserForm userx={userx} />\r\n     </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default EditUserPage;"],"mappings":";;AAAA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,YAAY,MAAM,qCAAqC;AAAC;AAE/D,MAAMC,YAAY,GAAG,MAAM;EAAA;EACzB,MAAM,CAACC,KAAK,EAAEC,OAAO,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EACvC,MAAM,CAACM,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA;EACA;EACA;;EAEA;;EAEAD,SAAS,CAAC,MAAM;IACd,MAAMS,oBAAoB,GAAG,IAAIC,eAAe,EAAE;IAClD,MAAMC,WAAW,GAAGF,oBAAoB,CAACG,MAAM;IAE/C,MAAMC,kBAAkB,GAAG,YAAY;MACrC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,qDAAoD,EACrD;UACEH,MAAM,EAAED;QACV,CAAC,CACF;QACD;QACA,MAAMK,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,EAAE;;QAElC;QACA,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;UAChB;UACA,MAAMC,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC;QACzB;;QAEA;QACAd,OAAO,CAACU,IAAI,CAACK,KAAK,CAAC;;QAEnB;QACAb,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC,CAAC,OAAOc,GAAG,EAAE;QACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAACG,OAAO,CAAC;MAC1B;IACF,CAAC;IAEDZ,kBAAkB,EAAE;IAEpB,OAAO,MAAM;MACXJ,oBAAoB,CAACiB,KAAK,EAAE;IAC9B,CAAC;EACH,CAAC,EAAE,CAAC,0BAA0B,CAAC,CAAC;EAEhC,IAAInB,SAAS,EAAE;IACb,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoD;EAC7D;EAEA,IAAI,CAACF,KAAK,EAAE;IACV,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgC;EACzC;EAEA,oBACI;IAAA,uBACC,QAAC,YAAY;MAAC,KAAK,EAAEA;IAAM;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA,QAC1B;AAGX,CAAC;AAAC,GAhEID,YAAY;AAAA,KAAZA,YAAY;AAkElB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module"}