{"ast":null,"code":"var _jsxFileName = \"E:\\\\ICS\\\\Y3\\\\Cloud\\\\frontend\\\\Cloud-Frontend\\\\src\\\\components\\\\auth\\\\SignupForm.js\",\n  _s = $RefreshSig$();\nimport { useForm } from 'react-hook-form';\nimport FormInputError from '../../UI/form/FormInputError';\nimport TextInput from '../../UI/form/TextInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SignupForm = () => {\n  _s();\n  const {\n    register,\n    handleSubmit,\n    formState\n  } = useForm();\n  const submitHandler = async formData => {\n    try {\n      const response = await fetch('http://localhost:5000/auth/signup', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw Error(data.error);\n      }\n      console.log(data);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"flex  flex-col p-10 gap-5 bg-gray-800 w-fit\",\n    onSubmit: handleSubmit(submitHandler),\n    children: [/*#__PURE__*/_jsxDEV(TextInput, {\n      label: \"Name\",\n      type: \"text\",\n      name: \"name\",\n      register: register,\n      validation: {\n        required: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), formState.errors.name && /*#__PURE__*/_jsxDEV(FormInputError, {\n      children: \"Name must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      label: \"Username\",\n      type: \"text\",\n      name: \"username\",\n      register: register,\n      validation: {\n        required: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), formState.errors.username && /*#__PURE__*/_jsxDEV(FormInputError, {\n      children: \"Username must not be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n      label: \"Password\",\n      type: \"password\",\n      name: \"password\",\n      register: register,\n      validation: {\n        required: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), formState.errors.password && /*#__PURE__*/_jsxDEV(FormInputError, {\n      children: \"Password must not be empty.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"bg-white rounded-xl my-4 py-2 px-8 self-center\",\n      children: \"Signup\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(SignupForm, \"FW3sJsj8gRxWrmRSQec/vgQ11EM=\", false, function () {\n  return [useForm];\n});\n_c = SignupForm;\nexport default SignupForm;\nvar _c;\n$RefreshReg$(_c, \"SignupForm\");","map":{"version":3,"names":["useForm","FormInputError","TextInput","SignupForm","register","handleSubmit","formState","submitHandler","formData","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","error","console","log","err","message","required","errors","name","username","password"],"sources":["E:/ICS/Y3/Cloud/frontend/Cloud-Frontend/src/components/auth/SignupForm.js"],"sourcesContent":["import { useForm } from 'react-hook-form';\r\nimport FormInputError from '../../UI/form/FormInputError';\r\nimport TextInput from '../../UI/form/TextInput';\r\n\r\nconst SignupForm = () => {\r\n  const { register, handleSubmit, formState } = useForm();\r\n\r\n  const submitHandler = async (formData) => {\r\n    try {\r\n      const response = await fetch('http://localhost:5000/auth/signup', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(formData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw Error(data.error);\r\n      }\r\n\r\n      console.log(data);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      className=\"flex  flex-col p-10 gap-5 bg-gray-800 w-fit\"\r\n      onSubmit={handleSubmit(submitHandler)}\r\n    >\r\n      <TextInput\r\n        label=\"Name\"\r\n        type=\"text\"\r\n        name=\"name\"\r\n        register={register}\r\n        validation={{ required: true }}\r\n      />\r\n      {formState.errors.name && (\r\n        <FormInputError>Name must not be empty</FormInputError>\r\n      )}\r\n\r\n      <TextInput\r\n        label=\"Username\"\r\n        type=\"text\"\r\n        name=\"username\"\r\n        register={register}\r\n        validation={{ required: true }}\r\n      />\r\n      {formState.errors.username && (\r\n        <FormInputError>Username must not be empty.</FormInputError>\r\n      )}\r\n\r\n      <TextInput\r\n        label=\"Password\"\r\n        type=\"password\"\r\n        name=\"password\"\r\n        register={register}\r\n        validation={{ required: true }}\r\n      />\r\n      {formState.errors.password && (\r\n        <FormInputError>Password must not be empty.</FormInputError>\r\n      )}\r\n\r\n      <button\r\n        type=\"submit\"\r\n        className=\"bg-white rounded-xl my-4 py-2 px-8 self-center\"\r\n      >\r\n        Signup\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SignupForm;\r\n"],"mappings":";;AAAA,SAASA,OAAO,QAAQ,iBAAiB;AACzC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,SAAS,MAAM,yBAAyB;AAAC;AAEhD,MAAMC,UAAU,GAAG,MAAM;EAAA;EACvB,MAAM;IAAEC,QAAQ;IAAEC,YAAY;IAAEC;EAAU,CAAC,GAAGN,OAAO,EAAE;EAEvD,MAAMO,aAAa,GAAG,MAAOC,QAAQ,IAAK;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAmC,EAAE;QAChEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,QAAQ;MAC/B,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAMC,KAAK,CAACH,IAAI,CAACI,KAAK,CAAC;MACzB;MAEAC,OAAO,CAACC,GAAG,CAACN,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOO,GAAG,EAAE;MACZF,OAAO,CAACC,GAAG,CAACC,GAAG,CAACC,OAAO,CAAC;IAC1B;EACF,CAAC;EAED,oBACE;IACE,SAAS,EAAC,6CAA6C;IACvD,QAAQ,EAAEnB,YAAY,CAACE,aAAa,CAAE;IAAA,wBAEtC,QAAC,SAAS;MACR,KAAK,EAAC,MAAM;MACZ,IAAI,EAAC,MAAM;MACX,IAAI,EAAC,MAAM;MACX,QAAQ,EAAEH,QAAS;MACnB,UAAU,EAAE;QAAEqB,QAAQ,EAAE;MAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAC/B,EACDnB,SAAS,CAACoB,MAAM,CAACC,IAAI,iBACpB,QAAC,cAAc;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB,eAED,QAAC,SAAS;MACR,KAAK,EAAC,UAAU;MAChB,IAAI,EAAC,MAAM;MACX,IAAI,EAAC,UAAU;MACf,QAAQ,EAAEvB,QAAS;MACnB,UAAU,EAAE;QAAEqB,QAAQ,EAAE;MAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAC/B,EACDnB,SAAS,CAACoB,MAAM,CAACE,QAAQ,iBACxB,QAAC,cAAc;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB,eAED,QAAC,SAAS;MACR,KAAK,EAAC,UAAU;MAChB,IAAI,EAAC,UAAU;MACf,IAAI,EAAC,UAAU;MACf,QAAQ,EAAExB,QAAS;MACnB,UAAU,EAAE;QAAEqB,QAAQ,EAAE;MAAK;IAAE;MAAA;MAAA;MAAA;IAAA,QAC/B,EACDnB,SAAS,CAACoB,MAAM,CAACG,QAAQ,iBACxB,QAAC,cAAc;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAChB,eAED;MACE,IAAI,EAAC,QAAQ;MACb,SAAS,EAAC,gDAAgD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAGnD;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEX,CAAC;AAAC,GAvEI1B,UAAU;EAAA,QACgCH,OAAO;AAAA;AAAA,KADjDG,UAAU;AAyEhB,eAAeA,UAAU;AAAC;AAAA"},"metadata":{},"sourceType":"module"}